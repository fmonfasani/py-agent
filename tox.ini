[tox]
envlist = 
    py38,
    py39,
    py310,
    py311,
    py312,
    lint,
    type,
    security,
    docs
isolated_build = true
skip_missing_interpreters = true

[testenv]
description = Run unit tests
deps = 
    -r{toxinidir}/requirements-dev.txt
commands = 
    pytest {posargs:tests/ --cov=py_agent_client --cov-report=term-missing}
setenv =
    COVERAGE_FILE = {toxworkdir}/.coverage.{envname}
    PY_COLORS = 1

[testenv:py38]
description = Run tests on Python 3.8
basepython = python3.8

[testenv:py39]
description = Run tests on Python 3.9
basepython = python3.9

[testenv:py310]
description = Run tests on Python 3.10
basepython = python3.10

[testenv:py311]
description = Run tests on Python 3.11
basepython = python3.11

[testenv:py312]
description = Run tests on Python 3.12
basepython = python3.12

[testenv:lint]
description = Run linting checks
deps = 
    flake8>=6.0.0
    black>=23.0.0
    isort>=5.12.0
commands = 
    flake8 py_agent_client tests
    black --check py_agent_client tests
    isort --check-only py_agent_client tests

[testenv:type]
description = Run type checking with mypy
deps = 
    mypy>=1.0.0
    types-requests
    types-PyYAML
commands = 
    mypy py_agent_client

[testenv:security]
description = Run security checks
deps = 
    safety
    bandit[toml]
commands = 
    safety check --file requirements.txt
    bandit -r py_agent_client

[testenv:docs]
description = Build documentation
deps = 
    mkdocs>=1.5.0
    mkdocs-material>=9.0.0
    mkdocstrings[python]>=0.22.0
commands = 
    mkdocs build

[testenv:docs-serve]
description = Serve documentation locally
deps = 
    mkdocs>=1.5.0
    mkdocs-material>=9.0.0
    mkdocstrings[python]>=0.22.0
commands = 
    mkdocs serve

[testenv:coverage]
description = Generate coverage report
deps = 
    -r{toxinidir}/requirements-dev.txt
    coverage[toml]
commands = 
    coverage combine
    coverage report
    coverage html
    coverage xml

[testenv:integration]
description = Run integration tests
deps = 
    -r{toxinidir}/requirements-dev.txt
commands = 
    pytest tests/integration/ -v {posargs}
setenv =
    {[testenv]setenv}
    INTEGRATION_TESTS = 1

[testenv:benchmark]
description = Run performance benchmarks
deps = 
    -r{toxinidir}/requirements-dev.txt
    pytest-benchmark
commands = 
    pytest tests/benchmarks/ -v --benchmark-only {posargs}

[testenv:clean]
description = Clean up build and test artifacts
deps = 
commands = 
    python -c "
    import shutil
    import glob
    dirs = ['build', 'dist', 'htmlcov', '.pytest_cache', '.mypy_cache', '.coverage*']
    for pattern in dirs:
        for path in glob.glob(pattern):
            try:
                if '.' in pattern:
                    import os
                    os.remove(path)
                else:
                    shutil.rmtree(path)
                print(f'Removed {{path}}')
            except:
                pass
    "

[testenv:release]
description = Build and check package for release
deps = 
    build
    twine
commands = 
    python -m build
    twine check dist/*

# Flake8 configuration
[flake8]
max-line-length = 88
extend-ignore = E203, W503, E501
exclude = 
    .git,
    __pycache__,
    .tox,
    .eggs,
    *.egg,
    build,
    dist,
    .venv,
    venv
per-file-ignores =
    tests/*:S101,S106
    examples/*:S106

# Coverage configuration
[coverage:run]
source = py_agent_client
omit = 
    */tests/*
    */test_*
    setup.py

[coverage:report]
exclude_lines =
    pragma: no cover
    def __repr__
    raise AssertionError
    raise NotImplementedError
    if __name__ == .__main__.:
    @abstractmethod

[coverage:html]
directory = htmlcov